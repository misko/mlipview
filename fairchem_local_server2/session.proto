syntax = "proto3";
package fairchem.session;

// 3x3 matrix, row-major order (m[0..8] = rows concatenated)
message Mat3 { repeated double m = 1; } // length 9, row-major

// Simulation parameters (all numeric fields are double for consistency)
message SimulationParams {
  string calculator = 1; // "uma" or "lj"
  // MD
  double temperature = 2;
  double timestep_fs = 3;
  double friction = 4;
  // Relax
  double fmax = 5;
  double max_step = 6;
  string optimizer = 7;
}

// Optional wrapper for flat arrays (row-major and packed)
message SystemArrays {
  // Each array represents shape (N,3), row-major flattened.
  repeated double positions = 1 [packed = true];
  repeated double velocities = 2 [packed = true];
  repeated double forces = 3 [packed = true];
}

message ClientAction {
  // Required transport sequencing
  uint64 seq = 1;
  optional uint64 ack = 2;

  // Frontend state correlation
  optional uint64 user_interaction_count = 30;
  optional uint64 sim_step = 31;

  // Oneof payload for action type
  oneof payload {
    // Frontend-origin state change / initialization
    UserInteraction user_interaction = 10;
    // Start a simulation (MD/RELAX)
    Start start = 11;
    // Stop the running simulation
    Stop stop = 12;
    // Ping / ACK only
    Ping ping = 13;
  }

  // Incremented when protocol changes; allows client/server gating
  uint32 schema_version = 100;

  message UserInteraction {
    repeated int32 atomic_numbers = 1;
    // Flat packed arrays, shape (N,3)
    repeated double positions = 2 [packed = true];
    repeated double velocities = 3 [packed = true];
    optional Mat3 cell = 4; // 3x3, row-major
  }

  message Start {
    enum SimType { MD = 0; RELAX = 1; }
    SimType simulation_type = 1;
    SimulationParams simulation_params = 2;
  }

  message Stop {}
  message Ping {}
}

message ServerResult {
  // Increasing sequence from server
  uint64 seq = 1;
  // Mirror last seen client seq
  optional uint64 client_seq = 2;

  // Echo/correlation fields for frontend state
  optional uint64 user_interaction_count = 30;
  optional uint64 sim_step = 31; // increments per produced frame

  // Oneof payload for server message
  oneof payload {
    Frame frame = 10;   // Simulation data frame
    Notice notice = 11; // Text/flags-only
  }

  // Incremented when protocol changes; allows client/server gating
  uint32 schema_version = 100;

  message Frame {
    // Flat packed arrays, shape (N,3)
    repeated double positions = 1 [packed = true];
    repeated double velocities = 2 [packed = true];
    repeated double forces = 3 [packed = true];
    optional Mat3 cell = 4;
    optional Mat3 stress = 5; // 3x3, row-major
    optional double energy = 6;
  }

  message Notice {
    optional string message = 1;
    optional bool simulation_stopped = 2;
  }
}
