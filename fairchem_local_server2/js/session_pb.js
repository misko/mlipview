// source: session.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.fairchem.session.ClientAction', null, global);
goog.exportSymbol('proto.fairchem.session.ClientAction.SimType', null, global);
goog.exportSymbol('proto.fairchem.session.ClientAction.Type', null, global);
goog.exportSymbol('proto.fairchem.session.Mat3', null, global);
goog.exportSymbol('proto.fairchem.session.ServerResult', null, global);
goog.exportSymbol('proto.fairchem.session.SimulationParams', null, global);
goog.exportSymbol('proto.fairchem.session.Vec3', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairchem.session.Vec3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairchem.session.Vec3.repeatedFields_, null);
};
goog.inherits(proto.fairchem.session.Vec3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fairchem.session.Vec3.displayName = 'proto.fairchem.session.Vec3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairchem.session.Mat3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairchem.session.Mat3.repeatedFields_, null);
};
goog.inherits(proto.fairchem.session.Mat3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fairchem.session.Mat3.displayName = 'proto.fairchem.session.Mat3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairchem.session.SimulationParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fairchem.session.SimulationParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fairchem.session.SimulationParams.displayName = 'proto.fairchem.session.SimulationParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairchem.session.ClientAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairchem.session.ClientAction.repeatedFields_, null);
};
goog.inherits(proto.fairchem.session.ClientAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fairchem.session.ClientAction.displayName = 'proto.fairchem.session.ClientAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fairchem.session.ServerResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fairchem.session.ServerResult.repeatedFields_, null);
};
goog.inherits(proto.fairchem.session.ServerResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fairchem.session.ServerResult.displayName = 'proto.fairchem.session.ServerResult';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairchem.session.Vec3.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairchem.session.Vec3.prototype.toObject = function(opt_includeInstance) {
  return proto.fairchem.session.Vec3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairchem.session.Vec3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.Vec3.toObject = function(includeInstance, msg) {
  var f, obj = {
vList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairchem.session.Vec3}
 */
proto.fairchem.session.Vec3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairchem.session.Vec3;
  return proto.fairchem.session.Vec3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairchem.session.Vec3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairchem.session.Vec3}
 */
proto.fairchem.session.Vec3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addV(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairchem.session.Vec3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairchem.session.Vec3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairchem.session.Vec3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.Vec3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double v = 1;
 * @return {!Array<number>}
 */
proto.fairchem.session.Vec3.prototype.getVList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.fairchem.session.Vec3} returns this
 */
proto.fairchem.session.Vec3.prototype.setVList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.Vec3} returns this
 */
proto.fairchem.session.Vec3.prototype.addV = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.Vec3} returns this
 */
proto.fairchem.session.Vec3.prototype.clearVList = function() {
  return this.setVList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairchem.session.Mat3.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairchem.session.Mat3.prototype.toObject = function(opt_includeInstance) {
  return proto.fairchem.session.Mat3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairchem.session.Mat3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.Mat3.toObject = function(includeInstance, msg) {
  var f, obj = {
mList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairchem.session.Mat3}
 */
proto.fairchem.session.Mat3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairchem.session.Mat3;
  return proto.fairchem.session.Mat3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairchem.session.Mat3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairchem.session.Mat3}
 */
proto.fairchem.session.Mat3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addM(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairchem.session.Mat3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairchem.session.Mat3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairchem.session.Mat3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.Mat3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double m = 1;
 * @return {!Array<number>}
 */
proto.fairchem.session.Mat3.prototype.getMList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.fairchem.session.Mat3} returns this
 */
proto.fairchem.session.Mat3.prototype.setMList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.Mat3} returns this
 */
proto.fairchem.session.Mat3.prototype.addM = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.Mat3} returns this
 */
proto.fairchem.session.Mat3.prototype.clearMList = function() {
  return this.setMList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairchem.session.SimulationParams.prototype.toObject = function(opt_includeInstance) {
  return proto.fairchem.session.SimulationParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairchem.session.SimulationParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.SimulationParams.toObject = function(includeInstance, msg) {
  var f, obj = {
calculator: jspb.Message.getFieldWithDefault(msg, 1, ""),
temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
timestepFs: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
friction: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
fmax: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
maxStep: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
optimizer: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairchem.session.SimulationParams}
 */
proto.fairchem.session.SimulationParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairchem.session.SimulationParams;
  return proto.fairchem.session.SimulationParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairchem.session.SimulationParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairchem.session.SimulationParams}
 */
proto.fairchem.session.SimulationParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalculator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimestepFs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFriction(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFmax(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxStep(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptimizer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairchem.session.SimulationParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairchem.session.SimulationParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairchem.session.SimulationParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.SimulationParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalculator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTimestepFs();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getFriction();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getFmax();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getMaxStep();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getOptimizer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string calculator = 1;
 * @return {string}
 */
proto.fairchem.session.SimulationParams.prototype.getCalculator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fairchem.session.SimulationParams} returns this
 */
proto.fairchem.session.SimulationParams.prototype.setCalculator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float temperature = 2;
 * @return {number}
 */
proto.fairchem.session.SimulationParams.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.SimulationParams} returns this
 */
proto.fairchem.session.SimulationParams.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float timestep_fs = 3;
 * @return {number}
 */
proto.fairchem.session.SimulationParams.prototype.getTimestepFs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.SimulationParams} returns this
 */
proto.fairchem.session.SimulationParams.prototype.setTimestepFs = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float friction = 4;
 * @return {number}
 */
proto.fairchem.session.SimulationParams.prototype.getFriction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.SimulationParams} returns this
 */
proto.fairchem.session.SimulationParams.prototype.setFriction = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float fmax = 5;
 * @return {number}
 */
proto.fairchem.session.SimulationParams.prototype.getFmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.SimulationParams} returns this
 */
proto.fairchem.session.SimulationParams.prototype.setFmax = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float max_step = 6;
 * @return {number}
 */
proto.fairchem.session.SimulationParams.prototype.getMaxStep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.SimulationParams} returns this
 */
proto.fairchem.session.SimulationParams.prototype.setMaxStep = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string optimizer = 7;
 * @return {string}
 */
proto.fairchem.session.SimulationParams.prototype.getOptimizer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.fairchem.session.SimulationParams} returns this
 */
proto.fairchem.session.SimulationParams.prototype.setOptimizer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairchem.session.ClientAction.repeatedFields_ = [10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairchem.session.ClientAction.prototype.toObject = function(opt_includeInstance) {
  return proto.fairchem.session.ClientAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairchem.session.ClientAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.ClientAction.toObject = function(includeInstance, msg) {
  var f, obj = {
seq: jspb.Message.getFieldWithDefault(msg, 1, 0),
ack: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
atomicNumbersList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.fairchem.session.Vec3.toObject, includeInstance),
velocitiesList: jspb.Message.toObjectList(msg.getVelocitiesList(),
    proto.fairchem.session.Vec3.toObject, includeInstance),
cell: (f = msg.getCell()) && proto.fairchem.session.Mat3.toObject(includeInstance, f),
simulationType: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
simulationParams: (f = msg.getSimulationParams()) && proto.fairchem.session.SimulationParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairchem.session.ClientAction}
 */
proto.fairchem.session.ClientAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairchem.session.ClientAction;
  return proto.fairchem.session.ClientAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairchem.session.ClientAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairchem.session.ClientAction}
 */
proto.fairchem.session.ClientAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAck(value);
      break;
    case 3:
      var value = /** @type {!proto.fairchem.session.ClientAction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAtomicNumbers(values[i]);
      }
      break;
    case 11:
      var value = new proto.fairchem.session.Vec3;
      reader.readMessage(value,proto.fairchem.session.Vec3.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    case 12:
      var value = new proto.fairchem.session.Vec3;
      reader.readMessage(value,proto.fairchem.session.Vec3.deserializeBinaryFromReader);
      msg.addVelocities(value);
      break;
    case 13:
      var value = new proto.fairchem.session.Mat3;
      reader.readMessage(value,proto.fairchem.session.Mat3.deserializeBinaryFromReader);
      msg.setCell(value);
      break;
    case 20:
      var value = /** @type {!proto.fairchem.session.ClientAction.SimType} */ (reader.readEnum());
      msg.setSimulationType(value);
      break;
    case 21:
      var value = new proto.fairchem.session.SimulationParams;
      reader.readMessage(value,proto.fairchem.session.SimulationParams.deserializeBinaryFromReader);
      msg.setSimulationParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairchem.session.ClientAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairchem.session.ClientAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairchem.session.ClientAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.ClientAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAtomicNumbersList();
  if (f.length > 0) {
    writer.writePackedInt32(
      10,
      f
    );
  }
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.fairchem.session.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getVelocitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.fairchem.session.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getCell();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.fairchem.session.Mat3.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.fairchem.session.ClientAction.SimType} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getSimulationParams();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.fairchem.session.SimulationParams.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.fairchem.session.ClientAction.Type = {
  INIT_SYSTEM: 0,
  UPDATE_POSITIONS: 1,
  START_SIMULATION: 2,
  STOP_SIMULATION: 3,
  PING: 4
};

/**
 * @enum {number}
 */
proto.fairchem.session.ClientAction.SimType = {
  MD: 0,
  RELAX: 1
};

/**
 * optional uint64 seq = 1;
 * @return {number}
 */
proto.fairchem.session.ClientAction.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 ack = 2;
 * @return {number}
 */
proto.fairchem.session.ClientAction.prototype.getAck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.setAck = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.clearAck = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairchem.session.ClientAction.prototype.hasAck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Type type = 3;
 * @return {!proto.fairchem.session.ClientAction.Type}
 */
proto.fairchem.session.ClientAction.prototype.getType = function() {
  return /** @type {!proto.fairchem.session.ClientAction.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.fairchem.session.ClientAction.Type} value
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated int32 atomic_numbers = 10;
 * @return {!Array<number>}
 */
proto.fairchem.session.ClientAction.prototype.getAtomicNumbersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.setAtomicNumbersList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.addAtomicNumbers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.clearAtomicNumbersList = function() {
  return this.setAtomicNumbersList([]);
};


/**
 * repeated Vec3 positions = 11;
 * @return {!Array<!proto.fairchem.session.Vec3>}
 */
proto.fairchem.session.ClientAction.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.fairchem.session.Vec3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairchem.session.Vec3, 11));
};


/**
 * @param {!Array<!proto.fairchem.session.Vec3>} value
 * @return {!proto.fairchem.session.ClientAction} returns this
*/
proto.fairchem.session.ClientAction.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.fairchem.session.Vec3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.Vec3}
 */
proto.fairchem.session.ClientAction.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.fairchem.session.Vec3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};


/**
 * repeated Vec3 velocities = 12;
 * @return {!Array<!proto.fairchem.session.Vec3>}
 */
proto.fairchem.session.ClientAction.prototype.getVelocitiesList = function() {
  return /** @type{!Array<!proto.fairchem.session.Vec3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairchem.session.Vec3, 12));
};


/**
 * @param {!Array<!proto.fairchem.session.Vec3>} value
 * @return {!proto.fairchem.session.ClientAction} returns this
*/
proto.fairchem.session.ClientAction.prototype.setVelocitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.fairchem.session.Vec3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.Vec3}
 */
proto.fairchem.session.ClientAction.prototype.addVelocities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.fairchem.session.Vec3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.clearVelocitiesList = function() {
  return this.setVelocitiesList([]);
};


/**
 * optional Mat3 cell = 13;
 * @return {?proto.fairchem.session.Mat3}
 */
proto.fairchem.session.ClientAction.prototype.getCell = function() {
  return /** @type{?proto.fairchem.session.Mat3} */ (
    jspb.Message.getWrapperField(this, proto.fairchem.session.Mat3, 13));
};


/**
 * @param {?proto.fairchem.session.Mat3|undefined} value
 * @return {!proto.fairchem.session.ClientAction} returns this
*/
proto.fairchem.session.ClientAction.prototype.setCell = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.clearCell = function() {
  return this.setCell(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairchem.session.ClientAction.prototype.hasCell = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SimType simulation_type = 20;
 * @return {!proto.fairchem.session.ClientAction.SimType}
 */
proto.fairchem.session.ClientAction.prototype.getSimulationType = function() {
  return /** @type {!proto.fairchem.session.ClientAction.SimType} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.fairchem.session.ClientAction.SimType} value
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.setSimulationType = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.clearSimulationType = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairchem.session.ClientAction.prototype.hasSimulationType = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional SimulationParams simulation_params = 21;
 * @return {?proto.fairchem.session.SimulationParams}
 */
proto.fairchem.session.ClientAction.prototype.getSimulationParams = function() {
  return /** @type{?proto.fairchem.session.SimulationParams} */ (
    jspb.Message.getWrapperField(this, proto.fairchem.session.SimulationParams, 21));
};


/**
 * @param {?proto.fairchem.session.SimulationParams|undefined} value
 * @return {!proto.fairchem.session.ClientAction} returns this
*/
proto.fairchem.session.ClientAction.prototype.setSimulationParams = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fairchem.session.ClientAction} returns this
 */
proto.fairchem.session.ClientAction.prototype.clearSimulationParams = function() {
  return this.setSimulationParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairchem.session.ClientAction.prototype.hasSimulationParams = function() {
  return jspb.Message.getField(this, 21) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fairchem.session.ServerResult.repeatedFields_ = [10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fairchem.session.ServerResult.prototype.toObject = function(opt_includeInstance) {
  return proto.fairchem.session.ServerResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fairchem.session.ServerResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.ServerResult.toObject = function(includeInstance, msg) {
  var f, obj = {
seq: jspb.Message.getFieldWithDefault(msg, 1, 0),
clientSeq: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.fairchem.session.Vec3.toObject, includeInstance),
forcesList: jspb.Message.toObjectList(msg.getForcesList(),
    proto.fairchem.session.Vec3.toObject, includeInstance),
velocitiesList: jspb.Message.toObjectList(msg.getVelocitiesList(),
    proto.fairchem.session.Vec3.toObject, includeInstance),
cell: (f = msg.getCell()) && proto.fairchem.session.Mat3.toObject(includeInstance, f),
message: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fairchem.session.ServerResult}
 */
proto.fairchem.session.ServerResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fairchem.session.ServerResult;
  return proto.fairchem.session.ServerResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fairchem.session.ServerResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fairchem.session.ServerResult}
 */
proto.fairchem.session.ServerResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientSeq(value);
      break;
    case 10:
      var value = new proto.fairchem.session.Vec3;
      reader.readMessage(value,proto.fairchem.session.Vec3.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    case 11:
      var value = new proto.fairchem.session.Vec3;
      reader.readMessage(value,proto.fairchem.session.Vec3.deserializeBinaryFromReader);
      msg.addForces(value);
      break;
    case 12:
      var value = new proto.fairchem.session.Vec3;
      reader.readMessage(value,proto.fairchem.session.Vec3.deserializeBinaryFromReader);
      msg.addVelocities(value);
      break;
    case 13:
      var value = new proto.fairchem.session.Mat3;
      reader.readMessage(value,proto.fairchem.session.Mat3.deserializeBinaryFromReader);
      msg.setCell(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fairchem.session.ServerResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fairchem.session.ServerResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fairchem.session.ServerResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fairchem.session.ServerResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.fairchem.session.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getForcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.fairchem.session.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getVelocitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.fairchem.session.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getCell();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.fairchem.session.Mat3.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional uint64 seq = 1;
 * @return {number}
 */
proto.fairchem.session.ServerResult.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_seq = 2;
 * @return {number}
 */
proto.fairchem.session.ServerResult.prototype.getClientSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.setClientSeq = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.clearClientSeq = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairchem.session.ServerResult.prototype.hasClientSeq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Vec3 positions = 10;
 * @return {!Array<!proto.fairchem.session.Vec3>}
 */
proto.fairchem.session.ServerResult.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.fairchem.session.Vec3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairchem.session.Vec3, 10));
};


/**
 * @param {!Array<!proto.fairchem.session.Vec3>} value
 * @return {!proto.fairchem.session.ServerResult} returns this
*/
proto.fairchem.session.ServerResult.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.fairchem.session.Vec3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.Vec3}
 */
proto.fairchem.session.ServerResult.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.fairchem.session.Vec3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};


/**
 * repeated Vec3 forces = 11;
 * @return {!Array<!proto.fairchem.session.Vec3>}
 */
proto.fairchem.session.ServerResult.prototype.getForcesList = function() {
  return /** @type{!Array<!proto.fairchem.session.Vec3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairchem.session.Vec3, 11));
};


/**
 * @param {!Array<!proto.fairchem.session.Vec3>} value
 * @return {!proto.fairchem.session.ServerResult} returns this
*/
proto.fairchem.session.ServerResult.prototype.setForcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.fairchem.session.Vec3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.Vec3}
 */
proto.fairchem.session.ServerResult.prototype.addForces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.fairchem.session.Vec3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.clearForcesList = function() {
  return this.setForcesList([]);
};


/**
 * repeated Vec3 velocities = 12;
 * @return {!Array<!proto.fairchem.session.Vec3>}
 */
proto.fairchem.session.ServerResult.prototype.getVelocitiesList = function() {
  return /** @type{!Array<!proto.fairchem.session.Vec3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fairchem.session.Vec3, 12));
};


/**
 * @param {!Array<!proto.fairchem.session.Vec3>} value
 * @return {!proto.fairchem.session.ServerResult} returns this
*/
proto.fairchem.session.ServerResult.prototype.setVelocitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.fairchem.session.Vec3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fairchem.session.Vec3}
 */
proto.fairchem.session.ServerResult.prototype.addVelocities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.fairchem.session.Vec3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.clearVelocitiesList = function() {
  return this.setVelocitiesList([]);
};


/**
 * optional Mat3 cell = 13;
 * @return {?proto.fairchem.session.Mat3}
 */
proto.fairchem.session.ServerResult.prototype.getCell = function() {
  return /** @type{?proto.fairchem.session.Mat3} */ (
    jspb.Message.getWrapperField(this, proto.fairchem.session.Mat3, 13));
};


/**
 * @param {?proto.fairchem.session.Mat3|undefined} value
 * @return {!proto.fairchem.session.ServerResult} returns this
*/
proto.fairchem.session.ServerResult.prototype.setCell = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.clearCell = function() {
  return this.setCell(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairchem.session.ServerResult.prototype.hasCell = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string message = 20;
 * @return {string}
 */
proto.fairchem.session.ServerResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.setMessage = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fairchem.session.ServerResult} returns this
 */
proto.fairchem.session.ServerResult.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fairchem.session.ServerResult.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.fairchem.session);
